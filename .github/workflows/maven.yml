# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: "sophie-user-service"
  ECS_SERVICE: "sophie"
  ECS_CLUSTER: "onebased-sophie-dev"

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build and test with Maven
        run: mvn clean verify --fail-at-end

      - name: Create JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v5.0
        with:
          coverage_results_path: target/site/jacoco/jacoco.xml
          coverage_report_name: Coverage
          coverage_report_title: JaCoCo
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: true
          minimum_coverage: 80
          fail_below_threshold: true
          publish_only_summary: false

      # Publish Coverage Job Summary  # Optional
      - name: Add Jacocoo report to workflow run summary
        run: |
          echo "| Outcome | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Coverage % | ${{ steps.jacoco_reporter.outputs.coverage_percentage }} |" >> $GITHUB_STEP_SUMMARY
          echo "| :heavy_check_mark: Number of Lines Covered | ${{ steps.jacoco_reporter.outputs.covered_lines }} |" >> $GITHUB_STEP_SUMMARY
          echo "| :x: Number of Lines Missed | ${{ steps.jacoco_reporter.outputs.missed_lines }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Number of Lines | ${{ steps.jacoco_reporter.outputs.total_lines }} |" >> $GITHUB_STEP_SUMMARY
  

  build:
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

      # Step 1: Set up AWS credentials using GitHub Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build with Maven
      run: |
           mvn clean install
           mkdir artifacts && cp target/*.jar artifacts
           cd artifacts && ls
    - name: Save artifact
      uses: actions/upload-artifact@v4
      with:
        name: github-action-artifact
        path: artifacts

    # Step 5: Log in to AWS ECR using GitHub Secrets
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    # Step 6: Build Docker image
    - name: Build Docker image
      run: |
        IMAGE_TAG=user-service-latest
        REPOSITORY_URI=${{ secrets.ECR_REPOSITORY_URI }}  # Make sure you set this as a secret
        
        # Build Docker image (make sure your Dockerfile is in the root or adjust the context)
        echo $REPOSITORY_URI:$IMAGE_TAG
        docker build -t $REPOSITORY_URI:$IMAGE_TAG .

    # Step 7: Push Docker image to ECR
    - name: Push Docker image to ECR
      id: build-image
      run: |
        IMAGE_TAG=user-service-latest
        REPOSITORY_URI=${{ secrets.ECR_REPOSITORY_URI }}
        docker push $REPOSITORY_URI:$IMAGE_TAG
    
        # Concatenate REPOSITORY_URI and IMAGE_TAG
        IMAGE="$REPOSITORY_URI:$IMAGE_TAG"
        echo "IMAGE_URI=$IMAGE" >> $GITHUB_ENV

    - name: Write ECR Image URI to Parameter Store
      run: |
        IMAGE_URI=${{ env.IMAGE_URI }}
        aws ssm put-parameter \
          --name "/onebased/sophie/user-service/image-uri" \
          --value "$IMAGE_URI" \
          --type String \
          --overwrite


  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Retrieve ECR Image URI from Parameter Store
        id: get-image-uri
        run: |
          IMAGE_URI=$(aws ssm get-parameter --name "/onebased/sophie/user-service/image-uri" --query "Parameter.Value" --output text)
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "Retrieved Image URI: $IMAGE_URI"

      - name: Assign Image to Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: Deploy Amazon ECS task
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

#  deploy:
#    needs: build
#    runs-on: [aws-ec2]
#    steps:
#      - name: Pull Image from docker hub
#        run: sudo docker pull cool1682/sophie-user-service:latest
#      - name: Delete old container
#        run: sudo docker rm -f sophie-user-service-container
#      - name: Run Docker Image
#        run: sudo docker run -e USER_POOL_SECRET=${{ secrets.USER_POOL_SECRET }} -d -p 80:8080 --name sophie-user-service-container cool1682/sophie-user-service
